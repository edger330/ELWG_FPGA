# for i in range(4,12):
# 	print ("/*--------------------------M%d-------------------------*/" %(i))
# 	print ("always @(posedge sys_clk or negedge sys_rst_n) begin ")
# 	print ("	if(!sys_rst_n) begin")
# 	print ("		m%d_done <= 1'b0;" %(i))
# 	print ("	end else if (matrix_memory_eop) begin ")
# 	print ("		m%d_done <= 1'b1;" %(i))
# 	print ("	end else if (busy_all[%d] & (matrix_memory_vld != 1)) begin "%(i))
# 	print ("		m%d_done <= 1'b1;" %(i))
# 	print ("	end else begin ")
# 	print ("		m%d_done <= 1'b0;"%(i))
# 	print ("	end")
# 	print ("end")
# 	print (" ")
# 	print (" ")
# 	print ("always @(posedge sys_clk or negedge sys_rst_n) begin")
# 	print ("	if(!sys_rst_n) begin")
# 	print ("		matrix_memory_sop_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_eop_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_vld_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_data_%d <= 32'd0;" %(i))
# 	print ("	end else if (current_state[%d]) begin " %(i))
# 	print ("		matrix_memory_sop_%d  <= matrix_memory_sop;" %(i))
# 	print ("		matrix_memory_eop_%d  <= matrix_memory_eop;" %(i))
# 	print ("		matrix_memory_vld_%d  <= matrix_memory_vld;" %(i))
# 	print ("		matrix_memory_data_%d <= matrix_memory_data;" %(i))
# 	print ("	end else if (current_state[%d]) begin" %(i+1))
# 	print ("		matrix_memory_sop_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_eop_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_vld_%d  <= 1'b0;" %(i))
# 	print ("		matrix_memory_data_%d <= 32'd0;" %(i))
# 	print ("	end")
# 	print ("end")

# for i in range(4,32):
# 	print ("			6'd%d: begin "%(i))
# 	print ("				pmx_%d  <= pmx;" %(i))
# 	print ("				pmy_%d  <= pmy;" %(i))
# 	print ("				pmm_%d  <= pmm;" %(i))
# 	print ("				lambda0_%d <= lambda0;" %(i))
# 	print ("				lambda1_%d <= lambda1;" %(i))
# 	print ("				r_%d <= r;" %(i))
# 	print ("			end")
# 	print (" ")


# for i in range(4,32):
# 	print ("	.p_mx_%d(pmx_%d)," %(i,i))
# 	print ("	.p_my_%d(pmy_%d)," %(i,i))
# 	print ("	.p_mm_%d(pmm_%d)," %(i,i))
# 	print ("	")


for i in range(4,32):
	print ("	.R_in_%d(r_%d)," %(i,i))
